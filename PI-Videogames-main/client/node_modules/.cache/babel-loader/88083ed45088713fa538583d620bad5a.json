{"ast":null,"code":"var _jsxFileName = \"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n\n  const [errors, setErrors] = React.useState({}); // Creamos estado de errores para ir mostrando al usuario en caso de que sus inputs no sean validos. Declaramos su estado inicial como un objeto vacío.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.username && 'danger',\n        type: \"text\",\n        name: \"username\",\n        value: user.username,\n        onChange: handleOnChange\n      }, 'username', false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 10\n      }, this), \" \", errors.username && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 31\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.password && 'danger',\n        type: \"password\",\n        name: \"password\",\n        value: user.password,\n        onChange: handleOnChange\n      }, 'password', false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 10\n      }, this), \" \", errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 30\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 10\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 8\n  }, this);\n}\n\n_s(Form, \"o+SUXTQUSJNurFcpxixiLrA9BM0=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","NavLink","Form","errors","setErrors","useState","username","user","handleOnChange","password"],"sources":["/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js"],"sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Form.css';\n\nexport default function Form() {\n\n const [errors, setErrors] = React.useState({}) // Creamos estado de errores para ir mostrando al usuario en caso de que sus inputs no sean validos. Declaramos su estado inicial como un objeto vacío.\n\n\n    return (\n       <div>\n       <form>\n         <label htmlFor='username'>Username:</label> {/*Creamos etiqueta Username con su respectivo input de texto (declaramos su key para que React pueda diferenciarlo del otro).*/}\n         <input className={errors.username && 'danger'} type='text' name='username' key='username' value={user.username} onChange={handleOnChange}></input> {/* Creamos input de tipo texto donde el usuario podrá ingresar su username(un email). Su clase solo será 'danger' si, mediante la función validadora, hay algún error en el input; esto hará que el borde del input se ponga en rojo debido al css aplicado. Su value será igual a la propiedad username de nuestro user el cual se almacenará gracias a la función handleOnChange que se ejecutará en cada evento onChange (cada vez que haya un cambio en el input.) */}\n         {errors.username && (<p className='danger'>{errors.username}</p>)} {/* Si hay algún error en el input del username, es decir si errors.username es truthy (no es null), renderizamos un tag de párrafo que muestre el valor guardado en esa propiedad. En este caso la string correspondiente al error.  */}\n         <label htmlFor='password'>Password:</label> {/*Creamos etiqueta Password con su respectivo input de texto (declaramos su key para que React pueda diferenciarlo del otro).*/}\n         <input className={errors.password && 'danger'} type='password' name='password' key='password' value={user.password} onChange={handleOnChange}></input> {/* Creamos input de tipo texto donde el usuario podrá ingresar su password. Su clase solo será 'danger' si, mediante la función validadora, hay algún error en el input; esto hará que el borde del input se ponga en rojo debido al css aplicado. Su value será igual a la propiedad password de nuestro user el cual se almacenará gracias a la función handleOnChange que se ejecutará en cada evento onChange (cada vez que haya un cambio en el input.) */}\n         {errors.password && <p className='danger'>{errors.password}</p>} {/* Si hay algún error en el input del password, es decir si errors.password es truthy (no es null), renderizamos un tag de párrafo que muestre el valor guardado en esa propiedad. En este caso la string correspondiente al error.  */}\n         <input type='submit' value='Submit'></input> {/*Creamos input de tipo submit para poder submitear el form. */}\n       </form> \n      </div>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,YAAP;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAE9B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAA5B,CAF8B,CAEiB;;EAG5C,oBACG;IAAA,uBACA;MAAA,wBACE;QAAO,OAAO,EAAC,UAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,oBAEE;QAAO,SAAS,EAAEF,MAAM,CAACG,QAAP,IAAmB,QAArC;QAA+C,IAAI,EAAC,MAApD;QAA2D,IAAI,EAAC,UAAhE;QAA0F,KAAK,EAAEC,IAAI,CAACD,QAAtG;QAAgH,QAAQ,EAAEE;MAA1H,GAA+E,UAA/E;QAAA;QAAA;QAAA;MAAA,QAFF,OAGGL,MAAM,CAACG,QAAP,iBAAoB;QAAG,SAAS,EAAC,QAAb;QAAA,UAAuBH,MAAM,CAACG;MAA9B;QAAA;QAAA;QAAA;MAAA,QAHvB,oBAIE;QAAO,OAAO,EAAC,UAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF,oBAKE;QAAO,SAAS,EAAEH,MAAM,CAACM,QAAP,IAAmB,QAArC;QAA+C,IAAI,EAAC,UAApD;QAA+D,IAAI,EAAC,UAApE;QAA8F,KAAK,EAAEF,IAAI,CAACE,QAA1G;QAAoH,QAAQ,EAAED;MAA9H,GAAmF,UAAnF;QAAA;QAAA;QAAA;MAAA,QALF,OAMGL,MAAM,CAACM,QAAP,iBAAmB;QAAG,SAAS,EAAC,QAAb;QAAA,UAAuBN,MAAM,CAACM;MAA9B;QAAA;QAAA;QAAA;MAAA,QANtB,oBAOE;QAAO,IAAI,EAAC,QAAZ;QAAqB,KAAK,EAAC;MAA3B;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA;EADA;IAAA;IAAA;IAAA;EAAA,QADH;AAaH;;GAlBuBP,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}