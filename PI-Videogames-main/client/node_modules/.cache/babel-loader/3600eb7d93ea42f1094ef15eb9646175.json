{"ast":null,"code":"import { GET_VIDEOGAME_DETAIL, GET_SEARCH_VIDEOGAMES, DELETE_VIDEOGAME, CREATE_VIDEOGAME, GET_ALL_VIDEOGAMES, GET_GENRES, GET_FILTERS } from '../actions/index';\nconst initialState = {\n  filteredVideogames: [],\n  videogames: [],\n  videogameDetail: [],\n  genres: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const allVideogames = state.videogames;\n\n  switch (action.type) {\n    case GET_ALL_VIDEOGAMES:\n      return { ...state,\n        videogames: action.payload,\n        filteredesVideogames: action.payload\n      };\n\n    case GET_SEARCH_VIDEOGAMES:\n      return { ...state,\n        videogames: action.payload\n      };\n\n    case GET_VIDEOGAME_DETAIL:\n      return { ...state,\n        videogameDetail: [action.payload]\n      };\n\n    case CREATE_VIDEOGAME:\n      return { ...state\n      };\n\n    case DELETE_VIDEOGAME:\n      return { ...state\n      };\n\n    case GET_GENRES:\n      return { ...state,\n        genres: action.payload\n      };\n\n    /*\n    GET_VIDEOGAMES_BY_GENRE tiene que filtrar mi actions.payload (videogames) donde alguna propiedad name de los objetos dentro de su propiedad genre (que es un array de genres), coincida con el genre se le pasa como argumento a la action.\n    */\n\n    case GET_FILTERS:\n      console.log(action.payload);\n      let filters = [...state.videogames];\n      if (action.payload.filterByGenre !== 'all') filters = filters.filter(videogame => videogame.genres.filter(genre => genre.name == action.payload.filterByGenre));\n      return { ...state,\n        filteredVideogames: filters\n      };\n    // return {...state, filteredVideogames:};\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"names":["GET_VIDEOGAME_DETAIL","GET_SEARCH_VIDEOGAMES","DELETE_VIDEOGAME","CREATE_VIDEOGAME","GET_ALL_VIDEOGAMES","GET_GENRES","GET_FILTERS","initialState","filteredVideogames","videogames","videogameDetail","genres","rootReducer","state","action","allVideogames","type","payload","filteredesVideogames","console","log","filters","filterByGenre","filter","videogame","genre","name"],"sources":["/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/reducers/index.js"],"sourcesContent":["import { GET_VIDEOGAME_DETAIL, GET_SEARCH_VIDEOGAMES, DELETE_VIDEOGAME, CREATE_VIDEOGAME, GET_ALL_VIDEOGAMES, GET_GENRES, GET_FILTERS} from '../actions/index';\n\n\nconst initialState = {\n    filteredVideogames: [],\n    videogames: [],\n    videogameDetail:[],\n    genres: []\n}\n\nexport default function rootReducer(state = initialState, action) {\n    const allVideogames = state.videogames\n\n    switch(action.type) {\n        case GET_ALL_VIDEOGAMES: return {...state, videogames: action.payload, filteredesVideogames:action.payload}\n\n        case GET_SEARCH_VIDEOGAMES: return {...state, videogames: action.payload}\n\n        case GET_VIDEOGAME_DETAIL: return {...state, videogameDetail: [action.payload]}\n\n        case CREATE_VIDEOGAME: return {...state}\n\n        case DELETE_VIDEOGAME: return {...state}\n\n        case GET_GENRES: return {...state, genres: action.payload}\n\n        /*\n        GET_VIDEOGAMES_BY_GENRE tiene que filtrar mi actions.payload (videogames) donde alguna propiedad name de los objetos dentro de su propiedad genre (que es un array de genres), coincida con el genre se le pasa como argumento a la action.\n        */\n\n        case GET_FILTERS: console.log(action.payload); \n        let filters = [...state.videogames]\n\n        if(action.payload.filterByGenre !== 'all') filters = filters.filter(videogame => videogame.genres.filter(genre => genre.name == action.payload.filterByGenre))\n\n        return {...state, filteredVideogames: filters}\n\n        // return {...state, filteredVideogames:};\n        \n        default: return {...state}\n\n    }\n}"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,qBAA/B,EAAsDC,gBAAtD,EAAwEC,gBAAxE,EAA0FC,kBAA1F,EAA8GC,UAA9G,EAA0HC,WAA1H,QAA4I,kBAA5I;AAGA,MAAMC,YAAY,GAAG;EACjBC,kBAAkB,EAAE,EADH;EAEjBC,UAAU,EAAE,EAFK;EAGjBC,eAAe,EAAC,EAHC;EAIjBC,MAAM,EAAE;AAJS,CAArB;AAOA,eAAe,SAASC,WAAT,GAAmD;EAAA,IAA9BC,KAA8B,uEAAtBN,YAAsB;EAAA,IAARO,MAAQ;EAC9D,MAAMC,aAAa,GAAGF,KAAK,CAACJ,UAA5B;;EAEA,QAAOK,MAAM,CAACE,IAAd;IACI,KAAKZ,kBAAL;MAAyB,OAAO,EAAC,GAAGS,KAAJ;QAAWJ,UAAU,EAAEK,MAAM,CAACG,OAA9B;QAAuCC,oBAAoB,EAACJ,MAAM,CAACG;MAAnE,CAAP;;IAEzB,KAAKhB,qBAAL;MAA4B,OAAO,EAAC,GAAGY,KAAJ;QAAWJ,UAAU,EAAEK,MAAM,CAACG;MAA9B,CAAP;;IAE5B,KAAKjB,oBAAL;MAA2B,OAAO,EAAC,GAAGa,KAAJ;QAAWH,eAAe,EAAE,CAACI,MAAM,CAACG,OAAR;MAA5B,CAAP;;IAE3B,KAAKd,gBAAL;MAAuB,OAAO,EAAC,GAAGU;MAAJ,CAAP;;IAEvB,KAAKX,gBAAL;MAAuB,OAAO,EAAC,GAAGW;MAAJ,CAAP;;IAEvB,KAAKR,UAAL;MAAiB,OAAO,EAAC,GAAGQ,KAAJ;QAAWF,MAAM,EAAEG,MAAM,CAACG;MAA1B,CAAP;;IAEjB;AACR;AACA;;IAEQ,KAAKX,WAAL;MAAkBa,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,OAAnB;MAClB,IAAII,OAAO,GAAG,CAAC,GAAGR,KAAK,CAACJ,UAAV,CAAd;MAEA,IAAGK,MAAM,CAACG,OAAP,CAAeK,aAAf,KAAiC,KAApC,EAA2CD,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeC,SAAS,IAAIA,SAAS,CAACb,MAAV,CAAiBY,MAAjB,CAAwBE,KAAK,IAAIA,KAAK,CAACC,IAAN,IAAcZ,MAAM,CAACG,OAAP,CAAeK,aAA9D,CAA5B,CAAV;MAE3C,OAAO,EAAC,GAAGT,KAAJ;QAAWL,kBAAkB,EAAEa;MAA/B,CAAP;IAEA;;IAEA;MAAS,OAAO,EAAC,GAAGR;MAAJ,CAAP;EA1Bb;AA6BH"},"metadata":{},"sourceType":"module"}