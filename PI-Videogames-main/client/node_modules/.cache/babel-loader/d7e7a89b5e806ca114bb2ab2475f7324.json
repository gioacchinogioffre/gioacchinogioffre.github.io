{"ast":null,"code":"var _jsxFileName = \"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function validate(user) {\n  // Creamos función validadora de datos de los inputs pasándole como argumento el estado user donde se irán guardando los valores de los inputs.\n  let errors = {}; // Creamos objeto donde iremos guardando como strings los errores en caso de que los hubiere para luego renderizarlos en pantalla.\n\n  if (!user.name) {\n    errors.name = 'name is required';\n  } // Si no hay nada en el input correspondiente al name, creamos una propiedad con dicho nombre en el objeto errors para renderizar que el name es necesaria.\n  else if (!/\\S+@\\S+\\.\\S+/.test(user.name)) {\n    errors.name = 'name is invalid';\n  } // Testeamos usando regular expressions si lo escrito en el input name es un name válido (en este caso si es un mail). Si es inválido creamos una propiedad en el objeto errors para renderizar que el name es inválido.\n  else if (!user.description) {\n    errors.description = 'description is required';\n  } // Si no hay nada en el input correspondiente al description, creamos una propiedad con dicho nombre en el objeto errors para renderizar que la description es necesaria.\n  else if (!/(?=.*[0-9])/.test(user.description)) {\n    errors.description = 'description is invalid';\n  } // Testeamos usando regular expressions si lo escrito en el input description es una description válida (en este caso si contiene al menos un número). Si es inválida creamos una propiedad en el objeto errors para renderizar que la description es inválida.\n\n\n  return errors; // Retornamos el objeto errores.\n}\nexport default function Form() {\n  _s();\n\n  const [user, setUser] = React.useState({\n    // Creamos estado de usuario donde se guardarán los valores de los inputs ingresados por el usuario en las siguientes propiedades:\n    name: '',\n    // declaramos el estado inicial de name y description como strings vacíos (nuestros inputs se mostrarán sin texto)\n    description: '',\n    rating,\n    released: \"\",\n    image: \"\"\n  });\n  const [errors, setErrors] = React.useState({}); // Creamos estado de errores para ir mostrando al usuario en caso de que sus inputs no sean validos. Declaramos su estado inicial como un objeto vacío.\n\n  const handleOnChange = e => {\n    // Declaramos función para ir manejando los cambios de estado a medida que hay cambios en los inputs. \n    setUser({ ...user,\n      [e.target.name]: e.target.value\n    }); // Actualizamos el estado de user al cual, utilizando destructuring, le agregaremos a lo que ya esté en el estado (en este caso un objeto) una propiedad con el nombre del input correspondiente y le asignaremos el valor ingresado al input.\n\n    setErrors(validate({ ...user,\n      [e.target.name]: e.target.value\n    })); // Actualizamos el estado de errors pasándole la función validadora. El argumento será nuestro estado user en cual buscaremos una propiedad que coincida con el nombre del atributo del input correspondiente y le asignaremos a dicha propiedad el value ingresado al input. Si alguno de los inputs no son válidos, la función nos devolverá un objeto errors con la propiedad name/description según corresponda y el texto de invalidación para dar aviso al usuario del error.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Return\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create your own Videogame!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.name && 'danger',\n        type: \"text\",\n        name: \"name\",\n        value: user.name,\n        onChange: handleOnChange,\n        placeholder: \"Videogame name\"\n      }, 'name', false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Released Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.date && 'danger',\n        type: \"text\",\n        name: \"date\",\n        value: user.date,\n        onChange: handleOnChange,\n        placeholder: \"07/07/2022\"\n      }, 'date', false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this), errors.date && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Rating:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.rating && 'danger',\n        type: \"number\",\n        name: \"rating\",\n        value: user.rating,\n        onChange: handleOnChange,\n        placeholder: \"From 1 to 10\"\n      }, 'rating', false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this), errors.rating && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.rating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.description && 'danger',\n        type: \"text\",\n        name: \"description\",\n        value: user.description,\n        onChange: handleOnChange,\n        placeholder: \"Describe your game...\"\n      }, 'description', false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), errors.description && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: \"Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: errors.description && 'danger',\n        type: \"text\",\n        name: \"image\",\n        value: user.image,\n        onChange: handleOnChange,\n        placeholder: \"Insert image url\"\n      }, 'image', false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), errors.image && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"danger\",\n        children: errors.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"CREATE!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 8\n  }, this);\n}\n\n_s(Form, \"jwsM3CbyO41BmJoxHqbFd+CnB50=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","NavLink","validate","user","errors","name","test","description","Form","setUser","useState","rating","released","image","setErrors","handleOnChange","e","target","value","date"],"sources":["/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js"],"sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Form.css';\n\nexport function validate(user) { // Creamos función validadora de datos de los inputs pasándole como argumento el estado user donde se irán guardando los valores de los inputs.\n    let errors = {}; // Creamos objeto donde iremos guardando como strings los errores en caso de que los hubiere para luego renderizarlos en pantalla.\n    if (!user.name) {errors.name = 'name is required'} // Si no hay nada en el input correspondiente al name, creamos una propiedad con dicho nombre en el objeto errors para renderizar que el name es necesaria.\n    else if (!/\\S+@\\S+\\.\\S+/.test(user.name)) {errors.name = 'name is invalid'} // Testeamos usando regular expressions si lo escrito en el input name es un name válido (en este caso si es un mail). Si es inválido creamos una propiedad en el objeto errors para renderizar que el name es inválido.\n    else if (!user.description) {errors.description = 'description is required'} // Si no hay nada en el input correspondiente al description, creamos una propiedad con dicho nombre en el objeto errors para renderizar que la description es necesaria.\n    else if (!/(?=.*[0-9])/.test(user.description)) {errors.description = 'description is invalid'} // Testeamos usando regular expressions si lo escrito en el input description es una description válida (en este caso si contiene al menos un número). Si es inválida creamos una propiedad en el objeto errors para renderizar que la description es inválida.\n    return errors; // Retornamos el objeto errores.\n  }\n\nexport default function Form() {\n    const [user, setUser] = React.useState ({ // Creamos estado de usuario donde se guardarán los valores de los inputs ingresados por el usuario en las siguientes propiedades:\n        name: '', // declaramos el estado inicial de name y description como strings vacíos (nuestros inputs se mostrarán sin texto)\n        description: '',\n        rating,\n        released: \"\",\n        image: \"\"\n        });\n\n const [errors, setErrors] = React.useState({}) // Creamos estado de errores para ir mostrando al usuario en caso de que sus inputs no sean validos. Declaramos su estado inicial como un objeto vacío.\n\n const handleOnChange = (e) => { // Declaramos función para ir manejando los cambios de estado a medida que hay cambios en los inputs. \n    setUser({...user, [e.target.name]: e.target.value}) // Actualizamos el estado de user al cual, utilizando destructuring, le agregaremos a lo que ya esté en el estado (en este caso un objeto) una propiedad con el nombre del input correspondiente y le asignaremos el valor ingresado al input.\n    setErrors(validate({...user, [e.target.name]: e.target.value})) // Actualizamos el estado de errors pasándole la función validadora. El argumento será nuestro estado user en cual buscaremos una propiedad que coincida con el nombre del atributo del input correspondiente y le asignaremos a dicha propiedad el value ingresado al input. Si alguno de los inputs no son válidos, la función nos devolverá un objeto errors con la propiedad name/description según corresponda y el texto de invalidación para dar aviso al usuario del error.\n }\n   \n\n\n    return (\n       <div>\n       <form>\n        <button>Return</button>\n        <h3>Create your own Videogame!</h3>\n\n        <label htmlFor='name'>Name:</label> \n             <input className={errors.name && 'danger'} type='text' name='name' key='name' value={user.name} onChange={handleOnChange} placeholder='Videogame name'></input> \n            {errors.name && (<p className='danger'>{errors.name}</p>)} \n\n        <label htmlFor='date'>Released Date:</label> \n             <input className={errors.date && 'danger'} type='text' name='date' key='date' value={user.date} onChange={handleOnChange} placeholder='07/07/2022'></input> \n             {errors.date && (<p className='danger'>{errors.date}</p>)} \n\n        <label htmlFor='date'>Rating:</label> \n             <input className={errors.rating && 'danger'} type='number' name='rating' key='rating' value={user.rating} onChange={handleOnChange} placeholder='From 1 to 10'></input> \n             {errors.rating && (<p className='danger'>{errors.rating}</p>)} \n\n        <label htmlFor='description'>Description:</label>\n            <input className={errors.description && 'danger'} type='text' name='description' key='description' value={user.description} onChange={handleOnChange} placeholder='Describe your game...'></input>\n            {errors.description && <p className='danger'>{errors.description}</p>} \n\n        <label htmlFor='image'>Image:</label>\n            <input className={errors.description && 'danger'} type='text' name='image' key='image' value={user.image} onChange={handleOnChange} placeholder='Insert image url'></input>\n            {errors.image && <p className='danger'>{errors.image}</p>} \n\n         <input type='submit' value='CREATE!'></input> \n       </form> \n      </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}