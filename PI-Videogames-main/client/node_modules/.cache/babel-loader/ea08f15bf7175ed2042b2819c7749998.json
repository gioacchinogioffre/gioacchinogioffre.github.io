{"ast":null,"code":"var _jsxFileName = \"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Paginate/Paginate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport s from './Paginate.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Paginate = props => {\n  _s();\n\n  const {\n    gamesPerPage,\n    allGames,\n    currentPage,\n    paginate,\n    prevPage,\n    nextPage\n  } = props;\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(allGames / gamesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const [index, setIndex] = useState({\n    startIndex: 0,\n    endIndex: 4\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.paginate,\n    children: [currentPage !== 1 &&\n    /*#__PURE__*/\n    // si currentPage es distinto de uno, renderizamos el botón de previous. Le pasamos la función prevPage para setear la current page a la anterior.\n    _jsxDEV(\"button\", {\n      type: \"primary\",\n      onClick: () => prevPage(),\n      children: \"< Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), pageNumbers.slice(index.startIndex, index.endIndex).map(num => /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => paginate(num),\n      children: num\n    }, num, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this) // Por cada número de página, renderizamos un botón que invocará la función paginate seteando  el número de página actual.\n    ), pageNumbers.length !== currentPage &&\n    /*#__PURE__*/\n    // Si la cantidad de páginas es distinta a la actual, renderizamos el botón de next. Le pasamos la función nextPage para setear la current page a la siguiente.\n    _jsxDEV(\"button\", {\n      type: \"primary\",\n      onClick: () => nextPage(),\n      children: ['> Next', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Paginate, \"wP1QVCAkj0C9lz0DZbZGNNEXaOE=\");\n\n_c = Paginate;\nexport default Paginate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"names":["React","useState","s","Paginate","props","gamesPerPage","allGames","currentPage","paginate","prevPage","nextPage","pageNumbers","i","Math","ceil","push","index","setIndex","startIndex","endIndex","slice","map","num","length"],"sources":["/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Paginate/Paginate.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport s from './Paginate.module.css'\n\nconst Paginate = (props) => {\n    const { gamesPerPage, allGames, currentPage, paginate, prevPage, nextPage } = props;\n\n    const pageNumbers = []\n\n  for (let i =1; i <= Math.ceil(allGames / gamesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const [index, setIndex] = useState({startIndex: 0, endIndex: 4})\n\n  return (\n        <div className={s.paginate}>\n        {currentPage !==1 && ( // si currentPage es distinto de uno, renderizamos el botón de previous. Le pasamos la función prevPage para setear la current page a la anterior.\n        <button  type='primary' onClick={() => prevPage()}>{\"< Previous\"}</button>)}\n\n        {/* { pageNumbers.map((num) => (\n          <a key={num} onClick={() => paginate(num)}>{num}</a> // Por cada número de página, renderizamos un botón que invocará la función paginate seteando  el número de página actual.\n        ))} */}\n\n         { pageNumbers.slice(index.startIndex, index.endIndex).map((num) => (\n          <a key={num} onClick={() => paginate(num)}>{num}</a> // Por cada número de página, renderizamos un botón que invocará la función paginate seteando  el número de página actual.\n        ))}\n\n\n        \n        {pageNumbers.length !== currentPage && ( // Si la cantidad de páginas es distinta a la actual, renderizamos el botón de next. Le pasamos la función nextPage para setear la current page a la siguiente.\n        <button type='primary' onClick={() => nextPage()}>{'> Next'} </button>)}\n        </div>\n    )\n}\n\nexport default Paginate;\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,CAAP,MAAc,uBAAd;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EACxB,MAAM;IAAEC,YAAF;IAAgBC,QAAhB;IAA0BC,WAA1B;IAAuCC,QAAvC;IAAiDC,QAAjD;IAA2DC;EAA3D,IAAwEN,KAA9E;EAEA,MAAMO,WAAW,GAAG,EAApB;;EAEF,KAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAUR,QAAQ,GAAGD,YAArB,CAApB,EAAwDO,CAAC,EAAzD,EAA6D;IAC3DD,WAAW,CAACI,IAAZ,CAAiBH,CAAjB;EACD;;EAED,MAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC;IAACiB,UAAU,EAAE,CAAb;IAAgBC,QAAQ,EAAE;EAA1B,CAAD,CAAlC;EAEA,oBACM;IAAK,SAAS,EAAEjB,CAAC,CAACM,QAAlB;IAAA,WACCD,WAAW,KAAI,CAAf;IAAA;IAAsB;IACvB;MAAS,IAAI,EAAC,SAAd;MAAwB,OAAO,EAAE,MAAME,QAAQ,EAA/C;MAAA,UAAoD;IAApD;MAAA;MAAA;MAAA;IAAA,QAFA,EAQGE,WAAW,CAACS,KAAZ,CAAkBJ,KAAK,CAACE,UAAxB,EAAoCF,KAAK,CAACG,QAA1C,EAAoDE,GAApD,CAAyDC,GAAD,iBACzD;MAAa,OAAO,EAAE,MAAMd,QAAQ,CAACc,GAAD,CAApC;MAAA,UAA4CA;IAA5C,GAAQA,GAAR;MAAA;MAAA;MAAA;IAAA,QADyD,CACJ;IADpD,CARH,EAcCX,WAAW,CAACY,MAAZ,KAAuBhB,WAAvB;IAAA;IAAwC;IACzC;MAAQ,IAAI,EAAC,SAAb;MAAuB,OAAO,EAAE,MAAMG,QAAQ,EAA9C;MAAA,WAAmD,QAAnD;IAAA;MAAA;MAAA;MAAA;IAAA,QAfA;EAAA;IAAA;IAAA;IAAA;EAAA,QADN;AAmBD,CA9BD;;GAAMP,Q;;KAAAA,Q;AAgCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}