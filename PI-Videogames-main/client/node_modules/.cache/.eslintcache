[{"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/index.js":"1","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/App.js":"2","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/reportWebVitals.js":"3","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/NavBar/NavBar.js":"4","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/VideogameDetail/VideogameDetail.js":"5","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js":"6","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/LandingPage/LandingPage.js":"7","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/store/index.js":"8","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/reducers/index.js":"9","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/actions/index.js":"10","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Home/Home.js":"11","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Paginate/Paginate.js":"12","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Utils/Utils.js":"13","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/SearchBar/SearchBar.js":"14","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Login/Login.js":"15"},{"size":810,"mtime":1655643786102,"results":"16","hashOfConfig":"17"},{"size":761,"mtime":1656289446435,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1655502636029,"results":"19","hashOfConfig":"17"},{"size":2194,"mtime":1656423448077,"results":"20","hashOfConfig":"17"},{"size":3356,"mtime":1656444174773,"results":"21","hashOfConfig":"17"},{"size":8818,"mtime":1656358508159,"results":"22","hashOfConfig":"17"},{"size":3443,"mtime":1656364943787,"results":"23","hashOfConfig":"17"},{"size":881,"mtime":1655605515250,"results":"24","hashOfConfig":"17"},{"size":3934,"mtime":1656437879576,"results":"25","hashOfConfig":"17"},{"size":2648,"mtime":1656374699661,"results":"26","hashOfConfig":"17"},{"size":13686,"mtime":1656444634080,"results":"27","hashOfConfig":"17"},{"size":765,"mtime":1656126670857,"results":"28","hashOfConfig":"17"},{"size":442,"mtime":1655933571148,"results":"29","hashOfConfig":"17"},{"size":991,"mtime":1656423709947,"results":"30","hashOfConfig":"17"},{"size":985,"mtime":1656426644222,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"8efboh",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/index.js",[],["71","72"],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/App.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/reportWebVitals.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/NavBar/NavBar.js",["73","74","75"],"import React, { useState }  from 'react';\nimport {  Link } from 'react-router-dom';\nimport s from './NavBar.module.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport radar from '../Icons/logophoto3.png'\nimport homeIcon from '../Icons/home.png'\nimport add from '../Icons/add.png'\n\nexport default function NavBar({filterByGenre, filterByOrigin, searchByName, filterByPlatforms}) {\n\n  const [hover, setHover] = useState({home: false, create: false})\n\n  const handleOnHover = (e) => {\n    if (e.target.alt === 'home') setHover({...hover, home:true}) \n    if (e.target.alt === 'create') setHover({...hover, create:true})\n  }\n\n    const handleOnOut = (e) => {\n      if (e.target.alt === 'home') setHover({...hover, home:false}) \n      if (e.target.alt === 'create') setHover({...hover, create:false}) \n   }\n\n    return (\n            <nav>\n                 <div className={s.items}>\n                   <div className={s.titleCreate}>\n                    <Link className= {s.link} to ='/home'> <img className={s.radar} src={radar} alt='radar'></img> </Link>\n                      <Link className={s.link} to='/home'><img className ={s.homeIcon} src={homeIcon} alt='home' onMouseOver={(e) => handleOnHover(e)} onMouseOut={(e) => handleOnOut(e)}/> </Link>\n                     <Link className={s.link} to='/createVideoGame'><img className ={s.homeIcon} src={add} alt='create' onMouseOver={(e) => handleOnHover(e)} onMouseOut={(e) => handleOnOut(e)}/> </Link>\n                      <div>\n                      {hover.home ? <h3 className={s.textRenders}>Home</h3> : false}\n                      {hover.create ? <h3 className={s.textRenders}>Create Game</h3> : false}\n                      </div>\n                   </div>\n\n                     <SearchBar filterByGenre={filterByGenre} filterByOrigin={filterByOrigin} searchByName={searchByName} filterByPlatforms={filterByPlatforms}/>\n                    <div className={s.userBar}>\n                        <Link className={s.link} to='/logIn' ><a> LOG IN </a></Link>\n                        <a> SIGN UP </a>\n                        <a> FAQ </a>\n                     </div>\n                    \n                 </div>\n            </nav>\n    )\n}\n","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/VideogameDetail/VideogameDetail.js",["76"],"import React, { Component } from 'react';\n// import { Link } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport { getVideogameDetail, deleteVideogame} from '../../actions/index';\nimport NavBar from '../NavBar/NavBar';\nimport s from './VideogameDetail.module.css'\nimport rating from '../Icons/rating.png'\nimport swal from 'sweetalert';\n\n\nexport class VideogameDetail extends Component {\n\n    componentDidMount() {\n        const videogameDetail = this.props.match.params.videogameId\n        this.props.getVideogameDetail(videogameDetail)\n    }\n\n    handleOnDeleteGame = () => {\n        this.props.deleteVideogame(this.props.vgDetail[0].id)\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover this videogame!\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n          })\n          .then((willDelete) => {\n            if (willDelete) {\n             this.props.deleteVideogame(this.props.vgDetail.id)\n             this.props.history.push('/home')\n             swal(\"Videogame has been deleted!\", {\n                 icon: \"success\",\n                });\n            } else {\n              swal(\"Your videogame is safe!\");\n            }\n          });\n    }\n\n    handleOnClick = () => {\n        this.props.history.push('/home')\n    }\n\n    render(){\n    return (  \n        <div>\n        <NavBar/>\n     {this.props.vgDetail.length ?\n      this.props.vgDetail.map(vg =>\n        <div key={vg.name}>\n\n            <div key={vg.id} className={s.container}>\n              <div><img className={s.image} src ={vg.background_image} alt='imageVgD'/></div>\n              <div className={s.vgContainer}>\n                 <h1>{vg.name}</h1>\n                 <h3>Released: {vg.released}</h3>\n                 <p className={s.description}>{vg.description}</p>\n              </div>\n           </div>\n\n           <div className={s.info}>\n                <div className={s.infoGP}><p>Genres: {vg.genres.map(g => g.name).join(' | ')}</p></div>\n\n                <div className={s.infoGP}>\n                    <h3>Rating: {vg.rating}</h3>\n                    {/* <img className={s.imageP} src={rating}></img>  */}\n                </div>\n\n                <div className={s.infoGP}><p>Platforms: {vg.platforms.join(' | ')}</p></div>\n\n                {vg.createdOnDb && <button onClick={this.handleOnDeleteGame}>DELETE GAME</button>}\n\n                </div>\n\n           </div>\n\n        ) \n        : <main>\n        <h1 className={s.errorTitle}>4<span><i class=\"fas fa-ghost\"></i></span>4</h1>\n        <h2 className={s.errorSubTitle}>Error: 404 game not found</h2>\n        <button className={s.button} onClick={this.handleOnClick}>Return Home</button>\n      </main>\n    }\n    </div>\n    )\n}\n}\n\n\nfunction mapStateToProps(state) { \n    return {\n        vgDetail: state.videogameDetail,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) { \n    return {\n        getVideogameDetail: videogameId => dispatch(getVideogameDetail(videogameId)),\n        deleteVideogame: id => dispatch(deleteVideogame(id)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VideogameDetail); // Conectamos a nuestro componente en primer lugar con el estado global (store) pasándolo como prop mediante mapStateToProps, y en segundo lugar con las actions mediante mapDispatchToProps.","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Form/Form.js",["77","78","79","80","81","82","83"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport s from './Form.module.css';\nimport { useDispatch, useSelector, } from 'react-redux';\nimport { createVideogame, getGenres} from '../../actions';\nimport swal from 'sweetalert';\nimport photo from '../Icons/logophoto.jpg';\nimport NavBar from '../NavBar/NavBar';\n\nexport function validate(game) {\n    \n    let errors = {}; \n    if (!/^[a-zA-Z0-9]/.test(game.name)) {errors.name = 'name can only contain letters and numbers'} \n    if (!game.name.length) {errors.name = 'name is required'} \n    if (game.name[game.name.length -1] === \" \") {errors.name = 'name cannot end with white spaces'} \n    if (game.name.length > 40) {errors.name = 'name must be shorter'} \n    if (!/^[a-zA-Z0-9]/.test(game.description)) {errors.description = 'description can only contain letters and numbers'} \n    if (!game.description) {errors.description = 'description is required'} \n    if (!game.platforms.length) {errors.platforms = 'platforms are required'}; \n    if (!game.genres.length) {errors.genres = 'genres are required'} \n    if(game.rating > 5 || game.rating < 1) {errors.rating = 'rating is invalid'}\n    if(game.background_image.length > 255) {errors.background_image = 'url is too long'}\n    // if(game.background_image.length > 0) {if(!/([a-z\\-_0-9\\/\\:\\.]*\\.(jpg|jpeg|png|gif))/i.test(game.bacground_image)) {errors.background_image = 'url is invalid'}}\n    return errors; \n  }\n\n\n const Form = () => {\n     \n     const formatDate = () => {\n         const date = new Date();\n         return date.toISOString().slice(0, 10);\n        }\n        \n        const [game, setGame] = React.useState ({ \n            name: '',\n            description: '',\n            rating: \"\",\n            released: formatDate(),\n            background_image: '',\n            platforms: [],\n            genres: [],\n        });\n        \n        const [renders, setRenders] = React.useState([])\n        const history = useHistory();\n        \n        useEffect(() => {\n            dispatch(getGenres())\n        }, [])\n\n\n\n const [errors, setErrors] = React.useState({}) \n const allGenres = useSelector(state => state.genres);\n const dispatch = useDispatch()\n\n\n const handleOnChange = (e) => {\n     setGame({...game, [e.target.name]: e.target.value})\n     setErrors(validate({...game, [e.target.name]: e.target.value})) \n    }\n\n    const [control, setControl] = useState(false)\n    \n    const controlForm = () => {\n        if (Object.keys(errors).length) return setControl(true)\n    }\n\n const handleOnSubmit = (e) => {\n    e.preventDefault();\n    controlForm()\n    if (!Object.keys(errors).length) {\n        if(game.name.length) {\n            if(game.background_image.length === 0) {game.background_image = photo}\n            game.genres = game.genres.map(g => parseInt(g))\n            swal(\"Videogame created!\", \"\", \"success\")}\n            dispatch(createVideogame(game))\n        }\n }\n    \n const handleOnSelect = (e, prop) => {\n    let genre = allGenres.find(g => g.id == e.target.value)\n    if (!game[prop].find(p => p == e.target.value )) {\n        if(prop === 'genres' && game.genres.length <= 2) {\n            setGame({...game, [e.target.name]: [...game[prop], e.target.value]})\n            setErrors(validate({...game, [e.target.name]: e.target.value})) \n            setRenders([...renders, genre])\n        } else if (prop === 'platforms' && game.platforms.length <= 5) {\n            setGame({...game, [e.target.name]: [...game[prop], e.target.value]})\n            setErrors(validate({...game, [e.target.name]: e.target.value})) \n        }\n    }\n   }\n\nconst handleOnClickDelete = (e, prop) => {\n    if(e.target.name == 'genre') {\n  setGame({...game, genres: game.genres.filter(g => g != prop)})\n  setRenders(renders.filter(r => r.id !== parseInt(prop)))\n  setErrors(validate({...game, genres: game.genres.filter(g => g != prop)}))\n}\nelse{\n  setGame({...game, platforms: game.platforms.filter(p => p !== e.target.value)})\n  setErrors(validate({...game, platforms: game.platforms.filter(p => p !== e.target.value)}))\n  }\n}\n\n\n\nlet platforms = ['PC', 'PlayStation', 'PlayStation 2', 'PlayStation 3', 'PlayStation 4', 'PlayStation 5', 'Xbox 360', 'Xbox One', 'Xbox Series S/X', 'Nintendo Switch', 'macOS', 'Android', 'iOS', 'Linux', 'PS Vita', 'Wii U', 'Nintedo 3DS' ]\n\n    return (\n        <div>\n\n        <NavBar></NavBar>\n        <div className={s.title}><h3>Create your own Game!</h3></div>\n       <form className={s.container} onSubmit={handleOnSubmit} id=\"videogameForm\">\n        \n       <div className={s.containerII}>\n         <div className={s.subContainer}>\n            <div className={s.subTitles}>\n            <label htmlFor='name' >Name:</label> \n                <input className={s.inputs} type='text' name='name' key='name' value={game.name} onChange={handleOnChange} placeholder='Example: World Of Warcraft'></input> \n                {(control && errors.name) && (<p className={s.danger}>{errors.name}</p>)}\n            </div>\n\n            <div className={s.subTitles} >\n            <label htmlFor='released'>Released Date:</label> \n                <input className={s.iDate} type='date' name='released' key='released' value={game.date} onChange={handleOnChange} placeholder='07/07/2022'></input> \n                {(control && errors.date) && (<p className={s.danger}>{errors.date}</p>)} \n            </div>\n            \n            <div className={s.subTitles}>\n            <label htmlFor='rating'>Rating:</label> \n                <input className={s.iRating} type='number' name='rating' key='rating' value={game.rating} onChange={handleOnChange} placeholder='From 1 to 5'></input> \n                {(control && errors.rating) && (<p className={s.danger}>{errors.rating}</p>)} \n            </div>\n\n                <div>\n                <select className={s.selectOption} name='genres' id='genres' onChange={(e) => handleOnSelect(e, e.target.name)}>\n                    <optgroup label='Genres'>\n                            {allGenres.map(g =>\n                        <option value={g.id} name={g.name} key={g.id}>{g.name}</option> )}\n                    </optgroup>\n                </select>\n                <select className={s.selectOption} name='platforms' id='platforms' onChange={(e) => handleOnSelect(e, e.target.name)}>\n                    <optgroup label='Platforms'>\n                            {platforms.map(p =>\n                        <option value={p} name={p} key={p}>{p}</option> )}\n                    </optgroup>\n                </select>\n                        {(control && errors.genres) && <p className={s.danger}>{errors.genres}</p>} \n                        {(control && errors.platforms) && <p className={s.danger}>{errors.platforms}</p>} \n                </div>\n    \n            <div>\n            <label htmlFor='description' className={s.descT} >Description:</label>{(control && errors.description) && <p className={s.danger}>{errors.description}</p>} \n                <textarea className={s.description} form=\"videogameForm\" name='description' key='description' value={game.description} onChange={handleOnChange} placeholder='Describe your game...'></textarea>\n            </div>\n\n            <div className={s.containeRenders} id='renders'>\n                       {renders.length > 0 && renders.map(g =>\n                       <div className={s.renders}>\n                          <span key={g.id}>{g.name}</span>\n                          <button type='button' name='genre'value={g.id} onClick={(e) => {handleOnClickDelete(e, e.target.value)}} >X</button>\n                       </div>\n                        )}\n                           {game.platforms.length > 0 && game.platforms.map(p =>\n                        <div className={s.renders}>\n                            <span key={p}>{p}</span>\n                            <button type='button' name='platforms' value={p} onClick={(e)=>{handleOnClickDelete(e)}}>X</button>\n                        </div>\n                        )}\n                </div>\n\n            \n            </div>\n\n            <div className={s.imageContainer}>\n                <img className={s.photoRender} src={photo} alt='photoRender'></img>\n                <label className={s.imageRender} htmlFor='image'>Image:</label>\n                    <input className={errors.background_image && s.danger} type='text' name='background_image' key='background_image' value={game.background_image} onChange={handleOnChange} placeholder='Insert image url'></input>\n                    {(control && errors.background_image) && <p className={s.danger}>{errors.background_image}</p>} \n                <input className={s.create} type='submit' value='CREATE!'></input> \n            </div>\n       </div>\n        <div>\n\n        </div>\n       </form> \n        </div>\n    )\n}\n\nexport default Form","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/LandingPage/LandingPage.js",["84"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getGenres } from '../../actions';\nimport { connect } from 'react-redux';\nimport s from './LandingPage.module.css'\nimport radar from '../Icons/logophoto3.png'\nimport sony from '../Icons/sony.png'\nimport nintendo from '../Icons/nintendo3.png'\nimport battle from '../Icons/battle.png'\nimport sega from '../Icons/sega.png'\nimport photo from '../Icons/landingphoto_2.png'\n\n\n\nexport class LandingPage extends Component {\n\n    componentDidMount() {\n        this.props.getGenres()\n    }\n\n    render () {\n    return (\n         <div>\n            <nav className={s.navLp}>\n                <div className={s.titleDiv}>\n                    {/* <h1 className={s.Title}> Ki </h1> */}\n                    <img className={s.radar} src={radar} alt='radar'></img>\n                </div>\n                <div>\n                    <a className={s.signUp} > LOG IN </a>\n                    <button className={s.signUp}>SIGN UP</button>\n                </div>\n            </nav>\n\n            <div className={s.landingPage}>\n                <div><h1 className={s.title}>THE MOST POPULAR GAMING API IN THE UNIVERSE</h1></div>\n                <br></br>\n            \n                <div className={s.video}>\n                    <img className={s.video} src={photo} alt='landingPhoto'></img>\n                </div>\n\n                <div className={s.info}>\n                    <div className={s.first}>\n                        <h2>What can you do here?</h2>\n                        <p>Search videogames, genres...crear Jorges ajskdjklasdlkasdks</p>\n                    </div>\n\n                    <div className={s.first}>\n                        <h2>What can you do here?</h2>\n                        <p>Search videogames, genres..dasjklasldkajskldjskdzsljdz.</p>\n                    </div>\n\n                    <div className={s.first}>\n                        <h2>It's free!</h2>\n                        <p>Register if you want to receive news with the latest game info</p>\n                    </div>\n\n                 </div>\n\n                        <button>\n                            <Link className={s.link} to='/home'>GET STARTED</Link>\n                        </button>\n\n                     <div className={s.sponsor} >\n                            <h2>Sponsored by</h2>\n                            <div className={s.icons}>\n                                <Link exact to='https://www.sony.net'><img className={s.sponsors} src={sony} alt='sony'/></Link>\n                                <Link exact to='https://www.nintendo.com'><img className={s.sponsors} src={nintendo} alt='nintendo'/></Link>\n                                <Link exact to='https://www.capcom.com'><img className={s.sponsors} src={battle} alt='battle'/></Link>\n                                <Link exact to='https://www.capcom.com'><img className={s.sponsors} src={sega} alt='sega'/></Link>\n                            </div>\n                     </div>\n                    \n                 </div>\n            </div>\n    )\n}\n}\n\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      getGenres: () => dispatch(getGenres())\n    }\n  }\n  \n  \n  export default connect(null, mapDispatchToProps)(LandingPage); // Conectamos a nuestro componente en primer lugar con el estado global (store) pasándolo como prop mediante mapStateToProps, y en segundo lugar con las actions mediante mapDispatchToProps","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/store/index.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/reducers/index.js",["85"],"import { GET_VIDEOGAME_DETAIL, DELETE_VIDEOGAME, CREATE_VIDEOGAME, GET_ALL_VIDEOGAMES, GET_GENRES, GET_FILTERS, GET_ORDERS} from '../actions/index';\n\n\nconst initialState = {\n    filteredVideogames: [],\n    videogames: [],\n    videogameDetail:[],\n    genres: [],\n    orders: [],\n    msg: ''\n}\n\nexport default function rootReducer(state = initialState, action) {\n\n    switch(action.type) {\n        case GET_ALL_VIDEOGAMES: return {...state, videogames: action.payload, filteredVideogames:action.payload}\n\n        case GET_VIDEOGAME_DETAIL: return {...state, videogameDetail: [action.payload]}\n\n        case CREATE_VIDEOGAME: return {...state, videogames: [...state.videogames, action.payload.game], msg: action.payload.msg}\n\n        case DELETE_VIDEOGAME: return {...state}\n\n        case GET_GENRES: return {...state, genres: action.payload}\n\n        case GET_FILTERS: \n        let filters = [...state.videogames]\n        let byOrigin = action.payload.filterByOrigin\n        let byGenre = action.payload.filterByGenre\n        let byName = action.payload.searchByName\n        let byPlatforms = action.payload.filterByPlatforms\n\n        console.log(byGenre)\n      \n        // if(byGenre !== 'all') { \n        //     filters = filters.filter(videogame => {\n        //         let genre = videogame.genres.find(vg => vg.name.includes(byGenre))\n        //         return genre})\n        //     }\n\n          if(byGenre.length > 0) { \n            if (byGenre.includes('All')) {\n                \n            } else {\n                for (let i = 0; i < byGenre.length; i++) {\n                    filters = filters.filter(videogame => {\n                        let genre = videogame.genres.find(vg => vg.name.includes(byGenre[i]))\n                        return genre})\n                }\n            }\n            }\n            // console.log(byGenre)\n\n        //  if(byPlatforms !== 'All Platforms') { \n        //     filters = filters.filter(videogame => {\n        //         let platform = videogame.platforms.find(p => p == byPlatforms)\n        //         return platform})\n        //         }\n        \n                if(byPlatforms.length > 0) { \n                    if(byPlatforms.includes('All Platforms')) {\n                    }\n                    else {for (let i = 0; i < byPlatforms.length; i++) {\n                            filters = filters.filter(videogame => {\n                                let platform = videogame.platforms.find(p => p == byPlatforms[i])\n                                return platform})\n                        }\n                        }\n                        }\n\n\n                \n        if(byOrigin === 'Created') filters = filters.filter(videogame => videogame.createdOnDb === true)\n        if(byOrigin === 'Api')  filters = filters.filter(videogame => videogame.createdOnDb === undefined)\n        if(byOrigin === 'All Games' && byGenre === 'All Genres') filters =[...state.videogames]\n            \n        if(byName) filters = filters.filter(vg => vg.name.toLowerCase().includes(byName.toLowerCase()))\n            \n        return {...state, filteredVideogames: filters}\n\n        case GET_ORDERS:\n        let vgOrder = [...state.filteredVideogames]\n        let byOrder = action.payload\n        let byRating = action.payload\n    \n        if(byOrder === 'descending') vgOrder = vgOrder.sort((a,b) => {\n            if(a.rating < b.rating) return 1\n            if(a.rating > b.rating) return -1\n            return 0})\n\n        if(byOrder === 'ascending') vgOrder = vgOrder.sort((a,b) => {\n             if(a.rating > b.rating) return 1\n             if(a.rating < b.rating) return -1\n             return 0})\n\n        if(byRating === 'a-z') vgOrder = vgOrder.sort((a,b) => a.name.localeCompare(b.name))\n        if(byRating === 'z-a') vgOrder = vgOrder.sort((a,b) => b.name.localeCompare(a.name))\n\n        return {...state, filteredVideogames: vgOrder}\n        \n        default: return {...state}\n\n    }\n}","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/actions/index.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Home/Home.js",["86"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {  useDispatch, useSelector } from 'react-redux';\nimport { getAllVideogames, getFilters, getGenres, getOrders } from '../../actions';\nimport h from './Home.module.css';\nimport Paginate from '../Paginate/Paginate';\nimport NavBar from \"../NavBar/NavBar\";\nimport xbox from '../Icons/xbox-2.png'\nimport play from '../Icons/playstation.png'\nimport rating from '../Icons/star-2.png'\nimport nintendo from '../Icons/nintendo.png'\nimport wii from '../Icons/wii-u.png'\nimport android from '../Icons/android.png'\nimport linux from '../Icons/linux.png'\nimport pc from '../Icons/pc.png'\nimport mac from '../Icons/mac.png'\nimport loading from '../Icons/loading3.gif'\n\n\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    \n\n    // local states filters/orders/search\n    const [searchByName, setSearchByName] = useState(null);\n    // const [filterByGenre, setFilterByGenre] = useState('all');\n    const [filterByGenre, setFilterByGenre] = useState([]);\n    const [filterByOrigin, setFilterByOrigin] = useState(null)\n    const [filterByPlatforms, setFilterByPlatforms] = useState([]);\n    // const [filterByPlatforms, setFilterByPlatforms] = useState('All Platforms');\n    const [renderFilters, setRenderFilters] = useState({origin: '', genres:[], platforms:[]});\n\n\n    const allGames = useSelector(state => state.filteredVideogames);\n    const allGenres = useSelector(state => state.genres);\n    // const [loading, setLoading] = useState(true)\n    \n    //Paginate\n    const [currentPage, setCurrentPage] = useState(1);\n    const [gamesPerPage] = useState(15);\n    const indexOfLastGame = currentPage * gamesPerPage;\n    const indexOfFirstGame = indexOfLastGame - gamesPerPage;\n    const currentGames = allGames.slice(indexOfFirstGame, indexOfLastGame)\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n    const prevPage= () => setCurrentPage(currentPage - 1);\n    const nextPage= () => setCurrentPage(currentPage + 1);\n\n\n   useEffect(() => {\n       dispatch(getGenres())\n       if(!allGames.length) dispatch(getAllVideogames())\n       //    setLoading(true)\n    }, [])\n    \n    useEffect(() => {\n        setCurrentPage(1)\n    }, [allGames])\n    \n\n    // const handleOnSelectGenre = (e) => {\n    //     if(!renderFilters.genres.includes(e.target.value)) setRenderFilters({...renderFilters, genres:[...renderFilters.genres, e.target.value]})\n    //     setCurrentPage(1)\n    //     dispatch(getFilters([...filterByGenre, e.target.value], filterByOrigin, searchByName, filterByPlatforms))\n    //     e.target.value !== 'All Genres' ? (setFilterByGenre([...filterByGenre, e.target.value])): setFilterByGenre([])\n    // }\n\n    const handleOnSelectGenre = (e) => {\n        if(!renderFilters.genres.includes(e.target.value)) setRenderFilters({...renderFilters, genres:[...renderFilters.genres, e.target.value]})\n        setCurrentPage(1)\n        if (e.target.value === 'All Genres') {\n            dispatch(getFilters([], filterByOrigin, searchByName, filterByPlatforms))\n            setFilterByGenre([])\n            setRenderFilters({...renderFilters, genres:[]})\n        } else {\n            dispatch(getFilters([...filterByGenre, e.target.value], filterByOrigin, searchByName, filterByPlatforms))\n            setFilterByGenre([...filterByGenre, e.target.value])   \n        }\n    }\n\n    // const handleOnSelectPlatforms = (e) => {\n    //     if(!renderFilters.platforms.includes(e.target.value)) setRenderFilters({...renderFilters, platforms:[...renderFilters.platforms, e.target.value]})\n    //     setFilterByPlatforms(e.target.value)\n    //     setCurrentPage(1)\n    //     let filterPlatforms = e.target.value;\n    //   dispatch(getFilters(filterByGenre, filterByOrigin, searchByName, filterPlatforms))\n    // }\n    const handleOnSelectPlatforms = (e) => {\n        if(!renderFilters.platforms.includes(e.target.value)) setRenderFilters({...renderFilters, platforms:[...renderFilters.platforms, e.target.value]})\n        setCurrentPage(1)\n        if(e.target.value === 'All Platforms') {\n            dispatch(getFilters(filterByGenre, filterByOrigin, searchByName, []))\n            setFilterByPlatforms([])\n            setRenderFilters({...renderFilters, platforms:[]})\n        } else {\n            dispatch(getFilters(filterByGenre, filterByOrigin, searchByName, [...filterByPlatforms, e.target.value]))\n            setFilterByPlatforms([...filterByPlatforms, e.target.value])   \n        }\n    }\n\n        \n    const handleOnSelectGames = (e) => {\n        setRenderFilters({...renderFilters, origin:e.target.value})\n        setFilterByOrigin(e.target.value)\n        setCurrentPage(1)\n        let filterGames = e.target.value;\n      dispatch(getFilters(filterByGenre, filterGames, searchByName, filterByPlatforms))\n    }\n\n\n\n    const handleOnSelectOrder = (e) => {\n        setCurrentPage(1)\n        let orderGames = e.target.value;\n        dispatch(getOrders(orderGames))\n      }\n\n      const handleOnClear = () => {\n        setFilterByGenre('All Genres')\n        setFilterByOrigin(null)\n        setFilterByPlatforms('All Platforms')\n        setSearchByName(null)\n        setRenderFilters({origin: '', genres:[], platforms:[]})\n        dispatch(getFilters('All Genres', 'All Games', null, 'All Platforms'))\n      }\n\n      const handleOnDelete = (e, prop) => {\n        if(prop) {\n            setRenderFilters({...renderFilters, [prop]: renderFilters[prop].filter(item => item !== e.target.value)}) \n            if(prop === 'genres') {\n                setFilterByGenre(filterByGenre.filter(item => item !== e.target.value))\n                dispatch(getFilters(filterByGenre.filter(item => item !== e.target.value), filterByOrigin, searchByName, filterByPlatforms))\n            } else {\n                setFilterByPlatforms(filterByPlatforms.filter(item => item !== e.target.value))\n                dispatch(getFilters(filterByGenre, filterByOrigin, searchByName, filterByPlatforms.filter(item => item !== e.target.value)))\n            }\n        }\n        else {\n            setRenderFilters({...renderFilters, origin: ''})\n            setFilterByOrigin('')\n            dispatch(getFilters(filterByGenre, 'All Games', searchByName, filterByPlatforms))\n        }\n        setCurrentPage(1)\n      \n      }\n\n\n    //  allGenres.length && console.log(allGenres[0].image_background)\n  \n     let platforms = ['Android', 'iOS', 'Linux', 'macOS', 'Nintendo Switch', 'Nintendo 3DS', 'PC', 'PlayStation', 'PlayStation 2', 'PlayStation 3', 'PlayStation 4', 'PlayStation 5', 'PS Vita', 'Wii U', 'Xbox 360', 'Xbox One', 'Xbox Series S/X', ]\n\n    return (\n        \n        <header className={h.Home}>\n                     <NavBar filterByGenre={filterByGenre} filterByOrigin={filterByOrigin} searchByName={searchByName} filterByPlatforms={filterByPlatforms}>\n                    </NavBar>\n\n         <div className={h.container}>\n\n              <div className={h.firstC}>\n                 <div >\n                    <button  onClick={() => handleOnClear()} className={h.clearFilters}>Clear filters</button>\n                 </div>\n\n                <div className={h.filters}>\n\n                       <div className={h.renderFilters}>\n                        {renderFilters.genres.length>0 && renderFilters.genres.map(r => {\n                            return <button value={r} onClick={(e) => handleOnDelete(e, 'genres')}> {r} x</button>})}\n                        {renderFilters.platforms.length>0 && renderFilters.platforms.map(r => {\n                            return <button value={r} onClick={(e) => handleOnDelete(e, 'platforms')}> {r} x</button>})}\n                        {renderFilters.origin.length>0 && <button value={renderFilters.origin} onClick={(e) => handleOnDelete(e)}> {renderFilters.origin} x</button>}\n                       </div>\n                        <select className={h.filters} name='all_db_games' id='games' size='4' onChange={(e) => handleOnSelectGames(e)}>\n                            <optgroup  label='Show'>\n                                <option value='All Games'>All Games</option>\n                                <option value='Api'>Api Games</option>\n                                <option value='Created'>Created Games</option>\n                            </optgroup>\n                        </select>\n                        <br></br><br></br><br></br>\n                        <div className={h.genres}>\n                        {/* {allGenres.length && allGenres.map(g => \n                        <img className={h.genreIcon} src={g.image_background} alt='genreIcon'></img>)} */}\n                        <select  className={h.filters} name='genres' id='genres' size='21' onChange={(e) => handleOnSelectGenre(e)}>\n                            <optgroup label='Genres'>\n                                <option value='All Genres'>All Genres</option>\n                               {allGenres.map(g =>\n                               <option value={g.name} key={g.id}>{g.name}</option> )}\n                            </optgroup>\n                         </select>\n                        <br></br><br></br>\n                        <select  className={h.filters} name='platforms' id='platforms' size='21' onChange={(e) => handleOnSelectPlatforms(e)}>\n                            <optgroup label='Platforms'>\n                                <option value='All Platforms'>All Platforms</option>\n                               {platforms.map(p =>\n                               <option value={p} key={p}>{p}</option> )}\n                            </optgroup>\n                         </select>\n                        </div>\n                </div>\n             </div>\n                    <div>\n                    <div className={h.orders}>Sort by: \n                     <select name='alphabetic' onChange={(e) => handleOnSelectOrder(e)}>\n                            <optgroup label='Order By'>\n                                <option value='a-z'>A-Z</option>\n                                <option value='z-a'>Z-A</option>\n                            </optgroup>\n                         </select>\n                        <select name='rating' onChange={(e) => handleOnSelectOrder(e)}>\n                            <optgroup label='Rating' >\n                                <option  value='ascending'>Ascending</option>\n                                <option value='descending'>Descending</option>\n                            </optgroup>\n                        </select>\n                    </div>\n                    {allGames.length >= 100 && <h1 className={h.trending}>Trending now</h1>}\n                    <div className={h.vgContainer}>\n                         {currentGames.length ? currentGames.map(vg => (\n                            <Link className={h.link} to={`/videogames/${vg.id}`}>\n                                    <div className={h.cardRating}>\n                                        <p>{vg.rating}</p>\n                                        <img alt='ratingIcon' src={rating}></img> \n                                    </div>\n                                <div className={h.Card} key={vg.id}>\n                                    <img className={h.vgImage} src={vg.background_image} alt='videogameImage'/>\n                                         <div className ={h.cardTitle}>{vg.name}</div>\n                                         <div className ={h.cardGenres}>{vg.genres.map(g => g.name).join(' | ')}</div>\n                                  \n                                    <div className={h.platforms}>\n                                         {vg.platforms.filter(p => p.includes('Xbox')).length > 0 && <img className={h.imageP} src={xbox} alt='xbox'></img>}\n                                         {vg.platforms.filter(p => p.includes('PlayStation')).length > 0 && <img className={h.imageP} src={play} alt='ps'></img>}\n                                         {vg.platforms.filter(p => p.includes('Wii U')).length > 0 &&  <img className={h.imageP} src={wii} alt='wii'></img>}\n                                         {vg.platforms.filter(p => p.includes('Nintendo')).length > 0 &&  <img className={h.imageP} src={nintendo} alt='nintendo'></img>}\n                                         {vg.platforms.filter(p => p.includes('Android')).length > 0 &&  <img className={h.imageP} src={android} alt='android'></img>}\n                                         {vg.platforms.filter(p => p.includes('Linux')).length > 0 &&  <img className={h.imageP} src={linux} alt='linux'></img>}\n                                         {vg.platforms.filter(p => p.includes('PC')).length > 0 &&  <img className={h.imageP} src={pc} alt='pc'></img>}\n                                         {vg.platforms.filter(p => p.includes('macOS')).length > 0 &&  <img className={h.imageP} src={mac} alt='mac'></img>}\n                                    </div>\n                                    {vg.createdOnDb && <div className={h.deleteGame}><button>DELETE GAME</button></div>}\n                            </div></Link>)) \n                            : <div>\n                                <h1>Loading...</h1>\n                                <img src={loading} alt='loading'></img>\n                              </div>\n                            }\n                    </div>\n                    </div>\n    \n            </div>\n                    <div className={h.paginate}>\n                    <Paginate  gamesPerPage={gamesPerPage}  allGames={allGames.length}  currentPage={currentPage}\n                    paginate={paginate} prevPage={prevPage}  nextPage={nextPage} />\n                    </div>\n\n        </header>\n    )\n    \n}\n\nexport default Home;\n\n","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Paginate/Paginate.js",["87"],"import React from \"react\";\nimport s from './Paginate.module.css'\n\nconst Paginate = (props) => {\n    const { gamesPerPage, allGames, currentPage, paginate, prevPage, nextPage } = props;\n\n    const pageNumbers = []\n\n  for (let i =1; i <= Math.ceil(allGames / gamesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n        <div className={s.paginate}>\n        {currentPage !==1 && (\n        <button  type='primary' onClick={() => prevPage()}>{\"< Previous\"}</button>)}\n        {pageNumbers.map((num) => (\n          <a key={num} onClick={() => paginate(num)}>{num}</a>\n        ))}\n\n        {pageNumbers.length !== currentPage && (\n        <button type='primary' onClick={() => nextPage()}>{'> Next'} </button>)}\n        </div>\n    )\n}\n\nexport default Paginate;\n\n","/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Utils/Utils.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/SearchBar/SearchBar.js",[],"/Users/joaco/Desktop/Henry/PI-videogames/PI-Videogames-main/client/src/components/Login/Login.js",["88","89","90"],"import React, { Component } from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport NavBar from '../NavBar/NavBar';\n// import s from './VideogameDetail.module.css'\n// import swal from 'sweetalert';\n\n\nexport class Login extends Component {\n\n    render(){\n    return (  \n        <div class=\"login-box\">\n            <NavBar></NavBar>\n             <h2>Login</h2>\n            <form>\n                <div class=\"user-box\">\n                    <input type=\"text\" name=\"\" required=\"\"/>\n                    <label>Username</label>\n                </div>\n                <div class=\"user-box\">\n                    <input type=\"password\" name=\"\" required=\"\"/>\n                    <label>Password</label>\n                </div>\n                <a href=\"#\">\n                     <span></span>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                Submit\n                </a>\n            </form>\n        </div>\n    )\n}\n}",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":38,"column":63,"nodeType":"97","endLine":38,"endColumn":66},{"ruleId":"95","severity":1,"message":"96","line":39,"column":25,"nodeType":"97","endLine":39,"endColumn":28},{"ruleId":"95","severity":1,"message":"96","line":40,"column":25,"nodeType":"97","endLine":40,"endColumn":28},{"ruleId":"98","severity":1,"message":"99","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":14},{"ruleId":"98","severity":1,"message":"102","line":46,"column":15,"nodeType":"100","messageId":"101","endLine":46,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":50,"column":12,"nodeType":"105","endLine":50,"endColumn":14,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":83,"column":42,"nodeType":"109","messageId":"110","endLine":83,"endColumn":44},{"ruleId":"107","severity":1,"message":"108","line":84,"column":33,"nodeType":"109","messageId":"110","endLine":84,"endColumn":35},{"ruleId":"107","severity":1,"message":"108","line":97,"column":22,"nodeType":"109","messageId":"110","endLine":97,"endColumn":24},{"ruleId":"107","severity":1,"message":"111","line":98,"column":55,"nodeType":"109","messageId":"110","endLine":98,"endColumn":57},{"ruleId":"107","severity":1,"message":"111","line":100,"column":66,"nodeType":"109","messageId":"110","endLine":100,"endColumn":68},{"ruleId":"95","severity":1,"message":"96","line":30,"column":21,"nodeType":"97","endLine":30,"endColumn":46},{"ruleId":"107","severity":1,"message":"108","line":65,"column":80,"nodeType":"109","messageId":"110","endLine":65,"endColumn":82},{"ruleId":"103","severity":1,"message":"112","line":54,"column":8,"nodeType":"105","endLine":54,"endColumn":10,"suggestions":"113"},{"ruleId":"95","severity":1,"message":"96","line":18,"column":11,"nodeType":"97","endLine":18,"endColumn":54},{"ruleId":"98","severity":1,"message":"114","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"98","severity":1,"message":"115","line":2,"column":19,"nodeType":"100","messageId":"101","endLine":2,"endColumn":23},{"ruleId":"95","severity":1,"message":"116","line":24,"column":17,"nodeType":"97","endLine":24,"endColumn":29},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'rating' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["119"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'allGames.length' and 'dispatch'. Either include them or remove the dependency array.",["120"],"'NavLink' is defined but never used.","'Link' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [dispatch]",{"range":"125","text":"126"},"Update the dependencies array to be: [allGames.length, dispatch]",{"range":"127","text":"128"},[2080,2082],"[dispatch]",[2175,2177],"[allGames.length, dispatch]"]